// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leads.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLead = `-- name: CreateLead :exec
INSERT INTO leads (id,name,phone,created_at)
VALUES ($1,$2,$3,$4)
RETURNING id, name, phone, created_at
`

type CreateLeadParams struct {
	ID        uuid.UUID
	Name      string
	Phone     sql.NullString
	CreatedAt time.Time
}

func (q *Queries) CreateLead(ctx context.Context, arg CreateLeadParams) error {
	_, err := q.db.ExecContext(ctx, createLead,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.CreatedAt,
	)
	return err
}

const deleteLead = `-- name: DeleteLead :exec
DELETE FROM leads WHERE id = $1
`

func (q *Queries) DeleteLead(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLead, id)
	return err
}

const getAllLeads = `-- name: GetAllLeads :many
SELECT id, name, phone, created_at FROM leads
`

func (q *Queries) GetAllLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.QueryContext(ctx, getAllLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLead = `-- name: GetLead :one
SELECT id, name, phone, created_at FROM leads WHERE id = $1
`

func (q *Queries) GetLead(ctx context.Context, id uuid.UUID) (Lead, error) {
	row := q.db.QueryRowContext(ctx, getLead, id)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
